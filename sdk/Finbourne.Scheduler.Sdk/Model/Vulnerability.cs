/*
 * FINBOURNE Scheduler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.763
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Scheduler.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Scheduler.Sdk.Model
{
    /// <summary>
    /// Represents the details of a Finbourne.Scheduler.WebApi.Dtos.Harbor.Vulnerability
    /// </summary>
    [DataContract(Name = "Vulnerability")]
    public partial class Vulnerability : IEquatable<Vulnerability>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Vulnerability" /> class.
        /// </summary>
        /// <param name="name">The name of the vulnerability.</param>
        /// <param name="package">The package that contains the vulnerability.</param>
        /// <param name="version">The version of the package.</param>
        /// <param name="fixVersion">The version that has a fix for the vulnerability (if known).</param>
        /// <param name="severity">The severity of the vulnerability.</param>
        /// <param name="description">The description of the vulnerability.</param>
        /// <param name="links">Relevant links for the vulnerability.</param>
        public Vulnerability(string name = default(string), string package = default(string), string version = default(string), string fixVersion = default(string), string severity = default(string), string description = default(string), List<string> links = default(List<string>))
        {
            this.Name = name;
            this.Package = package;
            this.Version = version;
            this.FixVersion = fixVersion;
            this.Severity = severity;
            this.Description = description;
            this.Links = links;
        }

        /// <summary>
        /// The name of the vulnerability
        /// </summary>
        /// <value>The name of the vulnerability</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The package that contains the vulnerability
        /// </summary>
        /// <value>The package that contains the vulnerability</value>
        [DataMember(Name = "package", EmitDefaultValue = true)]
        public string Package { get; set; }

        /// <summary>
        /// The version of the package
        /// </summary>
        /// <value>The version of the package</value>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string Version { get; set; }

        /// <summary>
        /// The version that has a fix for the vulnerability (if known)
        /// </summary>
        /// <value>The version that has a fix for the vulnerability (if known)</value>
        [DataMember(Name = "fixVersion", EmitDefaultValue = true)]
        public string FixVersion { get; set; }

        /// <summary>
        /// The severity of the vulnerability
        /// </summary>
        /// <value>The severity of the vulnerability</value>
        [DataMember(Name = "severity", EmitDefaultValue = true)]
        public string Severity { get; set; }

        /// <summary>
        /// The description of the vulnerability
        /// </summary>
        /// <value>The description of the vulnerability</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Relevant links for the vulnerability
        /// </summary>
        /// <value>Relevant links for the vulnerability</value>
        [DataMember(Name = "links", EmitDefaultValue = true)]
        public List<string> Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Vulnerability {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  FixVersion: ").Append(FixVersion).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Vulnerability);
        }

        /// <summary>
        /// Returns true if Vulnerability instances are equal
        /// </summary>
        /// <param name="input">Instance of Vulnerability to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Vulnerability input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Package == input.Package ||
                    (this.Package != null &&
                    this.Package.Equals(input.Package))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.FixVersion == input.FixVersion ||
                    (this.FixVersion != null &&
                    this.FixVersion.Equals(input.FixVersion))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Links == input.Links ||
                    this.Links != null &&
                    input.Links != null &&
                    this.Links.SequenceEqual(input.Links)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Package != null)
                    hashCode = hashCode * 59 + this.Package.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.FixVersion != null)
                    hashCode = hashCode * 59 + this.FixVersion.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Links != null)
                    hashCode = hashCode * 59 + this.Links.GetHashCode();
                return hashCode;
            }
        }

    }
}
