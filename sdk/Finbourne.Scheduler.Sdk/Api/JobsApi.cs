/*
 * FINBOURNE Scheduler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.777
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Finbourne.Scheduler.Sdk.Client;
using Finbourne.Scheduler.Sdk.Model;

namespace Finbourne.Scheduler.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreateJob: Create a new job
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createJobRequest">The request to create a new job</param>
        /// <returns>JobDefinition</returns>
        JobDefinition CreateJob(CreateJobRequest createJobRequest);

        /// <summary>
        /// [EXPERIMENTAL] CreateJob: Create a new job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createJobRequest">The request to create a new job</param>
        /// <returns>ApiResponse of JobDefinition</returns>
        ApiResponse<JobDefinition> CreateJobWithHttpInfo(CreateJobRequest createJobRequest);
        /// <summary>
        /// [EXPERIMENTAL] DeleteJob: Delete a job
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <returns>ResourceListOfScheduleDefinition</returns>
        ResourceListOfScheduleDefinition DeleteJob(string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] DeleteJob: Delete a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <returns>ApiResponse of ResourceListOfScheduleDefinition</returns>
        ApiResponse<ResourceListOfScheduleDefinition> DeleteJobWithHttpInfo(string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] GetHistory: Get the history of job runs
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">This field is obsolete, the value of this field would not be considered. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ResourceListOfJobHistory</returns>
        ResourceListOfJobHistory GetHistory(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string));

        /// <summary>
        /// [EXPERIMENTAL] GetHistory: Get the history of job runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">This field is obsolete, the value of this field would not be considered. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfJobHistory</returns>
        ApiResponse<ResourceListOfJobHistory> GetHistoryWithHttpInfo(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string));
        /// <summary>
        /// [EXPERIMENTAL] GetJobConsoleOutput: Gets the console output of a specific job run
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The RunId of the job run</param>
        /// <returns>string</returns>
        string GetJobConsoleOutput(string runId);

        /// <summary>
        /// [EXPERIMENTAL] GetJobConsoleOutput: Gets the console output of a specific job run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The RunId of the job run</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetJobConsoleOutputWithHttpInfo(string runId);
        /// <summary>
        /// [EXPERIMENTAL] GetRunHistory: Get the history for a single job run
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The unique ID of the run</param>
        /// <returns>JobRunResult</returns>
        JobRunResult GetRunHistory(string runId);

        /// <summary>
        /// [EXPERIMENTAL] GetRunHistory: Get the history for a single job run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The unique ID of the run</param>
        /// <returns>ApiResponse of JobRunResult</returns>
        ApiResponse<JobRunResult> GetRunHistoryWithHttpInfo(string runId);
        /// <summary>
        /// [EXPERIMENTAL] GetSchedulesForAJob: Get all the schedules for a single job
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <returns>ResourceListOfScheduleDefinition</returns>
        ResourceListOfScheduleDefinition GetSchedulesForAJob(string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] GetSchedulesForAJob: Get all the schedules for a single job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <returns>ApiResponse of ResourceListOfScheduleDefinition</returns>
        ApiResponse<ResourceListOfScheduleDefinition> GetSchedulesForAJobWithHttpInfo(string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] ListJobs: List the available jobs
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ResourceListOfJobDefinition</returns>
        ResourceListOfJobDefinition ListJobs(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string));

        /// <summary>
        /// [EXPERIMENTAL] ListJobs: List the available jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfJobDefinition</returns>
        ApiResponse<ResourceListOfJobDefinition> ListJobsWithHttpInfo(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string));
        /// <summary>
        /// [EXPERIMENTAL] RunJob: Run a job immediately
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="startJobRequest">The request for starting job</param>
        /// <returns>StartJobResponse</returns>
        StartJobResponse RunJob(string scope, string code, StartJobRequest startJobRequest);

        /// <summary>
        /// [EXPERIMENTAL] RunJob: Run a job immediately
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="startJobRequest">The request for starting job</param>
        /// <returns>ApiResponse of StartJobResponse</returns>
        ApiResponse<StartJobResponse> RunJobWithHttpInfo(string scope, string code, StartJobRequest startJobRequest);
        /// <summary>
        /// [EXPERIMENTAL] UpdateJob: Update a JobDefinition
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"></param>
        /// <param name="code"></param>
        /// <param name="updateJobRequest"></param>
        /// <returns>JobDefinition</returns>
        JobDefinition UpdateJob(string scope, string code, UpdateJobRequest updateJobRequest);

        /// <summary>
        /// [EXPERIMENTAL] UpdateJob: Update a JobDefinition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"></param>
        /// <param name="code"></param>
        /// <param name="updateJobRequest"></param>
        /// <returns>ApiResponse of JobDefinition</returns>
        ApiResponse<JobDefinition> UpdateJobWithHttpInfo(string scope, string code, UpdateJobRequest updateJobRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreateJob: Create a new job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createJobRequest">The request to create a new job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDefinition</returns>
        System.Threading.Tasks.Task<JobDefinition> CreateJobAsync(CreateJobRequest createJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] CreateJob: Create a new job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createJobRequest">The request to create a new job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobDefinition>> CreateJobWithHttpInfoAsync(CreateJobRequest createJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] DeleteJob: Delete a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfScheduleDefinition</returns>
        System.Threading.Tasks.Task<ResourceListOfScheduleDefinition> DeleteJobAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] DeleteJob: Delete a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfScheduleDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfScheduleDefinition>> DeleteJobWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetHistory: Get the history of job runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">This field is obsolete, the value of this field would not be considered. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfJobHistory</returns>
        System.Threading.Tasks.Task<ResourceListOfJobHistory> GetHistoryAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetHistory: Get the history of job runs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">This field is obsolete, the value of this field would not be considered. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfJobHistory)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfJobHistory>> GetHistoryWithHttpInfoAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetJobConsoleOutput: Gets the console output of a specific job run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The RunId of the job run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetJobConsoleOutputAsync(string runId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetJobConsoleOutput: Gets the console output of a specific job run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The RunId of the job run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetJobConsoleOutputWithHttpInfoAsync(string runId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetRunHistory: Get the history for a single job run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The unique ID of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRunResult</returns>
        System.Threading.Tasks.Task<JobRunResult> GetRunHistoryAsync(string runId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetRunHistory: Get the history for a single job run
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The unique ID of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRunResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobRunResult>> GetRunHistoryWithHttpInfoAsync(string runId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetSchedulesForAJob: Get all the schedules for a single job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfScheduleDefinition</returns>
        System.Threading.Tasks.Task<ResourceListOfScheduleDefinition> GetSchedulesForAJobAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetSchedulesForAJob: Get all the schedules for a single job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfScheduleDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfScheduleDefinition>> GetSchedulesForAJobWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] ListJobs: List the available jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfJobDefinition</returns>
        System.Threading.Tasks.Task<ResourceListOfJobDefinition> ListJobsAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] ListJobs: List the available jobs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfJobDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfJobDefinition>> ListJobsWithHttpInfoAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] RunJob: Run a job immediately
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="startJobRequest">The request for starting job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartJobResponse</returns>
        System.Threading.Tasks.Task<StartJobResponse> RunJobAsync(string scope, string code, StartJobRequest startJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] RunJob: Run a job immediately
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="startJobRequest">The request for starting job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartJobResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartJobResponse>> RunJobWithHttpInfoAsync(string scope, string code, StartJobRequest startJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] UpdateJob: Update a JobDefinition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"></param>
        /// <param name="code"></param>
        /// <param name="updateJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDefinition</returns>
        System.Threading.Tasks.Task<JobDefinition> UpdateJobAsync(string scope, string code, UpdateJobRequest updateJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] UpdateJob: Update a JobDefinition
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"></param>
        /// <param name="code"></param>
        /// <param name="updateJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<JobDefinition>> UpdateJobWithHttpInfoAsync(string scope, string code, UpdateJobRequest updateJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApi : IJobsApiSync, IJobsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobsApi : IJobsApi
    {
        private Finbourne.Scheduler.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi(String basePath)
        {
            this.Configuration = Finbourne.Scheduler.Sdk.Client.Configuration.MergeConfigurations(
                Finbourne.Scheduler.Sdk.Client.GlobalConfiguration.Instance,
                new Finbourne.Scheduler.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Finbourne.Scheduler.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Scheduler.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Scheduler.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobsApi(Finbourne.Scheduler.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Scheduler.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Scheduler.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Scheduler.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JobsApi(Finbourne.Scheduler.Sdk.Client.ISynchronousClient client, Finbourne.Scheduler.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Scheduler.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Scheduler.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Scheduler.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Scheduler.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Scheduler.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Scheduler.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateJob: Create a new job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createJobRequest">The request to create a new job</param>
        /// <returns>JobDefinition</returns>
        public JobDefinition CreateJob(CreateJobRequest createJobRequest)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<JobDefinition> localVarResponse = CreateJobWithHttpInfo(createJobRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateJob: Create a new job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createJobRequest">The request to create a new job</param>
        /// <returns>ApiResponse of JobDefinition</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<JobDefinition> CreateJobWithHttpInfo(CreateJobRequest createJobRequest)
        {
            // verify the required parameter 'createJobRequest' is set
            if (createJobRequest == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'createJobRequest' when calling JobsApi->CreateJob");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createJobRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request
            var localVarResponse = this.Client.Post<JobDefinition>("/api/jobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateJob: Create a new job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createJobRequest">The request to create a new job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDefinition</returns>
        public async System.Threading.Tasks.Task<JobDefinition> CreateJobAsync(CreateJobRequest createJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<JobDefinition> localVarResponse = await CreateJobWithHttpInfoAsync(createJobRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateJob: Create a new job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createJobRequest">The request to create a new job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<JobDefinition>> CreateJobWithHttpInfoAsync(CreateJobRequest createJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createJobRequest' is set
            if (createJobRequest == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'createJobRequest' when calling JobsApi->CreateJob");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createJobRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<JobDefinition>("/api/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteJob: Delete a job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <returns>ResourceListOfScheduleDefinition</returns>
        public ResourceListOfScheduleDefinition DeleteJob(string scope, string code)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition> localVarResponse = DeleteJobWithHttpInfo(scope, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteJob: Delete a job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <returns>ApiResponse of ResourceListOfScheduleDefinition</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition> DeleteJobWithHttpInfo(string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling JobsApi->DeleteJob");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling JobsApi->DeleteJob");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ResourceListOfScheduleDefinition>("/api/jobs/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteJob: Delete a job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfScheduleDefinition</returns>
        public async System.Threading.Tasks.Task<ResourceListOfScheduleDefinition> DeleteJobAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition> localVarResponse = await DeleteJobWithHttpInfoAsync(scope, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteJob: Delete a job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfScheduleDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition>> DeleteJobWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling JobsApi->DeleteJob");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling JobsApi->DeleteJob");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ResourceListOfScheduleDefinition>("/api/jobs/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetHistory: Get the history of job runs 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">This field is obsolete, the value of this field would not be considered. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ResourceListOfJobHistory</returns>
        public ResourceListOfJobHistory GetHistory(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfJobHistory> localVarResponse = GetHistoryWithHttpInfo(page, sortBy, start, limit, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetHistory: Get the history of job runs 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">This field is obsolete, the value of this field would not be considered. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfJobHistory</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfJobHistory> GetHistoryWithHttpInfo(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
        {
            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "sortBy", sortBy));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfJobHistory>("/api/jobs/history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetHistory: Get the history of job runs 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">This field is obsolete, the value of this field would not be considered. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfJobHistory</returns>
        public async System.Threading.Tasks.Task<ResourceListOfJobHistory> GetHistoryAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfJobHistory> localVarResponse = await GetHistoryWithHttpInfoAsync(page, sortBy, start, limit, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetHistory: Get the history of job runs 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">This field is obsolete, the value of this field would not be considered. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfJobHistory)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfJobHistory>> GetHistoryWithHttpInfoAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "sortBy", sortBy));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfJobHistory>("/api/jobs/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetJobConsoleOutput: Gets the console output of a specific job run 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The RunId of the job run</param>
        /// <returns>string</returns>
        public string GetJobConsoleOutput(string runId)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<string> localVarResponse = GetJobConsoleOutputWithHttpInfo(runId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetJobConsoleOutput: Gets the console output of a specific job run 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The RunId of the job run</param>
        /// <returns>ApiResponse of string</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<string> GetJobConsoleOutputWithHttpInfo(string runId)
        {
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling JobsApi->GetJobConsoleOutput");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("runId", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/api/jobs/history/{runId}/console", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobConsoleOutput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetJobConsoleOutput: Gets the console output of a specific job run 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The RunId of the job run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetJobConsoleOutputAsync(string runId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<string> localVarResponse = await GetJobConsoleOutputWithHttpInfoAsync(runId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetJobConsoleOutput: Gets the console output of a specific job run 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The RunId of the job run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<string>> GetJobConsoleOutputWithHttpInfoAsync(string runId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling JobsApi->GetJobConsoleOutput");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("runId", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/api/jobs/history/{runId}/console", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJobConsoleOutput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetRunHistory: Get the history for a single job run 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The unique ID of the run</param>
        /// <returns>JobRunResult</returns>
        public JobRunResult GetRunHistory(string runId)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<JobRunResult> localVarResponse = GetRunHistoryWithHttpInfo(runId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetRunHistory: Get the history for a single job run 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The unique ID of the run</param>
        /// <returns>ApiResponse of JobRunResult</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<JobRunResult> GetRunHistoryWithHttpInfo(string runId)
        {
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling JobsApi->GetRunHistory");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("runId", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request
            var localVarResponse = this.Client.Get<JobRunResult>("/api/jobs/history/{runId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetRunHistory: Get the history for a single job run 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The unique ID of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobRunResult</returns>
        public async System.Threading.Tasks.Task<JobRunResult> GetRunHistoryAsync(string runId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<JobRunResult> localVarResponse = await GetRunHistoryWithHttpInfoAsync(runId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetRunHistory: Get the history for a single job run 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="runId">The unique ID of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobRunResult)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<JobRunResult>> GetRunHistoryWithHttpInfoAsync(string runId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'runId' is set
            if (runId == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'runId' when calling JobsApi->GetRunHistory");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("runId", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(runId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JobRunResult>("/api/jobs/history/{runId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRunHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetSchedulesForAJob: Get all the schedules for a single job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <returns>ResourceListOfScheduleDefinition</returns>
        public ResourceListOfScheduleDefinition GetSchedulesForAJob(string scope, string code)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition> localVarResponse = GetSchedulesForAJobWithHttpInfo(scope, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetSchedulesForAJob: Get all the schedules for a single job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <returns>ApiResponse of ResourceListOfScheduleDefinition</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition> GetSchedulesForAJobWithHttpInfo(string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling JobsApi->GetSchedulesForAJob");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling JobsApi->GetSchedulesForAJob");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfScheduleDefinition>("/api/jobs/{scope}/{code}/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedulesForAJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetSchedulesForAJob: Get all the schedules for a single job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfScheduleDefinition</returns>
        public async System.Threading.Tasks.Task<ResourceListOfScheduleDefinition> GetSchedulesForAJobAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition> localVarResponse = await GetSchedulesForAJobWithHttpInfoAsync(scope, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetSchedulesForAJob: Get all the schedules for a single job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfScheduleDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition>> GetSchedulesForAJobWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling JobsApi->GetSchedulesForAJob");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling JobsApi->GetSchedulesForAJob");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfScheduleDefinition>("/api/jobs/{scope}/{code}/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedulesForAJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListJobs: List the available jobs 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ResourceListOfJobDefinition</returns>
        public ResourceListOfJobDefinition ListJobs(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfJobDefinition> localVarResponse = ListJobsWithHttpInfo(page, sortBy, start, limit, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListJobs: List the available jobs 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfJobDefinition</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfJobDefinition> ListJobsWithHttpInfo(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
        {
            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "sortBy", sortBy));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfJobDefinition>("/api/jobs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListJobs: List the available jobs 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfJobDefinition</returns>
        public async System.Threading.Tasks.Task<ResourceListOfJobDefinition> ListJobsAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfJobDefinition> localVarResponse = await ListJobsWithHttpInfoAsync(page, sortBy, start, limit, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListJobs: List the available jobs 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfJobDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfJobDefinition>> ListJobsWithHttpInfoAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "sortBy", sortBy));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfJobDefinition>("/api/jobs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListJobs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] RunJob: Run a job immediately 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="startJobRequest">The request for starting job</param>
        /// <returns>StartJobResponse</returns>
        public StartJobResponse RunJob(string scope, string code, StartJobRequest startJobRequest)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<StartJobResponse> localVarResponse = RunJobWithHttpInfo(scope, code, startJobRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] RunJob: Run a job immediately 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="startJobRequest">The request for starting job</param>
        /// <returns>ApiResponse of StartJobResponse</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<StartJobResponse> RunJobWithHttpInfo(string scope, string code, StartJobRequest startJobRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling JobsApi->RunJob");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling JobsApi->RunJob");

            // verify the required parameter 'startJobRequest' is set
            if (startJobRequest == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'startJobRequest' when calling JobsApi->RunJob");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = startJobRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request
            var localVarResponse = this.Client.Post<StartJobResponse>("/api/jobs/{scope}/{code}/$run", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] RunJob: Run a job immediately 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="startJobRequest">The request for starting job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartJobResponse</returns>
        public async System.Threading.Tasks.Task<StartJobResponse> RunJobAsync(string scope, string code, StartJobRequest startJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<StartJobResponse> localVarResponse = await RunJobWithHttpInfoAsync(scope, code, startJobRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] RunJob: Run a job immediately 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of the job</param>
        /// <param name="code">The code of the job</param>
        /// <param name="startJobRequest">The request for starting job</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartJobResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<StartJobResponse>> RunJobWithHttpInfoAsync(string scope, string code, StartJobRequest startJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling JobsApi->RunJob");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling JobsApi->RunJob");

            // verify the required parameter 'startJobRequest' is set
            if (startJobRequest == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'startJobRequest' when calling JobsApi->RunJob");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = startJobRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StartJobResponse>("/api/jobs/{scope}/{code}/$run", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateJob: Update a JobDefinition 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"></param>
        /// <param name="code"></param>
        /// <param name="updateJobRequest"></param>
        /// <returns>JobDefinition</returns>
        public JobDefinition UpdateJob(string scope, string code, UpdateJobRequest updateJobRequest)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<JobDefinition> localVarResponse = UpdateJobWithHttpInfo(scope, code, updateJobRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateJob: Update a JobDefinition 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"></param>
        /// <param name="code"></param>
        /// <param name="updateJobRequest"></param>
        /// <returns>ApiResponse of JobDefinition</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<JobDefinition> UpdateJobWithHttpInfo(string scope, string code, UpdateJobRequest updateJobRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling JobsApi->UpdateJob");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling JobsApi->UpdateJob");

            // verify the required parameter 'updateJobRequest' is set
            if (updateJobRequest == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'updateJobRequest' when calling JobsApi->UpdateJob");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = updateJobRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request
            var localVarResponse = this.Client.Put<JobDefinition>("/api/jobs/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateJob: Update a JobDefinition 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"></param>
        /// <param name="code"></param>
        /// <param name="updateJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JobDefinition</returns>
        public async System.Threading.Tasks.Task<JobDefinition> UpdateJobAsync(string scope, string code, UpdateJobRequest updateJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<JobDefinition> localVarResponse = await UpdateJobWithHttpInfoAsync(scope, code, updateJobRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateJob: Update a JobDefinition 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope"></param>
        /// <param name="code"></param>
        /// <param name="updateJobRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JobDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<JobDefinition>> UpdateJobWithHttpInfoAsync(string scope, string code, UpdateJobRequest updateJobRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling JobsApi->UpdateJob");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling JobsApi->UpdateJob");

            // verify the required parameter 'updateJobRequest' is set
            if (updateJobRequest == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'updateJobRequest' when calling JobsApi->UpdateJob");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = updateJobRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.777");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<JobDefinition>("/api/jobs/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateJob", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}