/*
 * FINBOURNE Scheduler API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.830
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Finbourne.Scheduler.Sdk.Client;
using Finbourne.Scheduler.Sdk.Model;

namespace Finbourne.Scheduler.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchedulesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreateSchedule: Create a Schedule for a job
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScheduleRequest"></param>
        /// <returns>ScheduleDefinition</returns>
        ScheduleDefinition CreateSchedule(CreateScheduleRequest createScheduleRequest);

        /// <summary>
        /// [EXPERIMENTAL] CreateSchedule: Create a Schedule for a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScheduleRequest"></param>
        /// <returns>ApiResponse of ScheduleDefinition</returns>
        ApiResponse<ScheduleDefinition> CreateScheduleWithHttpInfo(CreateScheduleRequest createScheduleRequest);
        /// <summary>
        /// [EXPERIMENTAL] DeleteSchedule: Delete a schedule
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be deleted</param>
        /// <param name="code">Code of the schedule to be deleted</param>
        /// <returns></returns>
        void DeleteSchedule(string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] DeleteSchedule: Delete a schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be deleted</param>
        /// <param name="code">Code of the schedule to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteScheduleWithHttpInfo(string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] EnabledSchedule: Enable/disable a schedule
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be enabled/disabled</param>
        /// <param name="code">Code of the schedule to be enabled/disabled</param>
        /// <param name="enable">Specify whether to enable or disable the schedule</param>
        /// <returns>ScheduleDefinition</returns>
        ScheduleDefinition EnabledSchedule(string scope, string code, bool enable);

        /// <summary>
        /// [EXPERIMENTAL] EnabledSchedule: Enable/disable a schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be enabled/disabled</param>
        /// <param name="code">Code of the schedule to be enabled/disabled</param>
        /// <param name="enable">Specify whether to enable or disable the schedule</param>
        /// <returns>ApiResponse of ScheduleDefinition</returns>
        ApiResponse<ScheduleDefinition> EnabledScheduleWithHttpInfo(string scope, string code, bool enable);
        /// <summary>
        /// [EXPERIMENTAL] GetSchedule: Get a single Schedule
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of Schedule</param>
        /// <param name="code">The code of the Schedule</param>
        /// <returns>ScheduleDefinition</returns>
        ScheduleDefinition GetSchedule(string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] GetSchedule: Get a single Schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of Schedule</param>
        /// <param name="code">The code of the Schedule</param>
        /// <returns>ApiResponse of ScheduleDefinition</returns>
        ApiResponse<ScheduleDefinition> GetScheduleWithHttpInfo(string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] ListSchedules: List the available Schedules
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ResourceListOfScheduleDefinition</returns>
        ResourceListOfScheduleDefinition ListSchedules(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string));

        /// <summary>
        /// [EXPERIMENTAL] ListSchedules: List the available Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfScheduleDefinition</returns>
        ApiResponse<ResourceListOfScheduleDefinition> ListSchedulesWithHttpInfo(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string));
        /// <summary>
        /// [EXPERIMENTAL] RunSchedule: Run a schedule immediately
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The schedule scope</param>
        /// <param name="code">The schedule cde</param>
        /// <returns>StartScheduleResponse</returns>
        StartScheduleResponse RunSchedule(string scope, string code);

        /// <summary>
        /// [EXPERIMENTAL] RunSchedule: Run a schedule immediately
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The schedule scope</param>
        /// <param name="code">The schedule cde</param>
        /// <returns>ApiResponse of StartScheduleResponse</returns>
        ApiResponse<StartScheduleResponse> RunScheduleWithHttpInfo(string scope, string code);
        /// <summary>
        /// [EXPERIMENTAL] UpdateSchedule: Update a schedule.
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be updated</param>
        /// <param name="code">Code of the schedule to be updated</param>
        /// <param name="updateScheduleRequest">The updated schedule</param>
        /// <returns>ScheduleDefinition</returns>
        ScheduleDefinition UpdateSchedule(string scope, string code, UpdateScheduleRequest updateScheduleRequest);

        /// <summary>
        /// [EXPERIMENTAL] UpdateSchedule: Update a schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be updated</param>
        /// <param name="code">Code of the schedule to be updated</param>
        /// <param name="updateScheduleRequest">The updated schedule</param>
        /// <returns>ApiResponse of ScheduleDefinition</returns>
        ApiResponse<ScheduleDefinition> UpdateScheduleWithHttpInfo(string scope, string code, UpdateScheduleRequest updateScheduleRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchedulesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// [EXPERIMENTAL] CreateSchedule: Create a Schedule for a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleDefinition</returns>
        System.Threading.Tasks.Task<ScheduleDefinition> CreateScheduleAsync(CreateScheduleRequest createScheduleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] CreateSchedule: Create a Schedule for a job
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleDefinition>> CreateScheduleWithHttpInfoAsync(CreateScheduleRequest createScheduleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] DeleteSchedule: Delete a schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be deleted</param>
        /// <param name="code">Code of the schedule to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteScheduleAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] DeleteSchedule: Delete a schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be deleted</param>
        /// <param name="code">Code of the schedule to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteScheduleWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] EnabledSchedule: Enable/disable a schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be enabled/disabled</param>
        /// <param name="code">Code of the schedule to be enabled/disabled</param>
        /// <param name="enable">Specify whether to enable or disable the schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleDefinition</returns>
        System.Threading.Tasks.Task<ScheduleDefinition> EnabledScheduleAsync(string scope, string code, bool enable, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] EnabledSchedule: Enable/disable a schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be enabled/disabled</param>
        /// <param name="code">Code of the schedule to be enabled/disabled</param>
        /// <param name="enable">Specify whether to enable or disable the schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleDefinition>> EnabledScheduleWithHttpInfoAsync(string scope, string code, bool enable, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] GetSchedule: Get a single Schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of Schedule</param>
        /// <param name="code">The code of the Schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleDefinition</returns>
        System.Threading.Tasks.Task<ScheduleDefinition> GetScheduleAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] GetSchedule: Get a single Schedule
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of Schedule</param>
        /// <param name="code">The code of the Schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleDefinition>> GetScheduleWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] ListSchedules: List the available Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfScheduleDefinition</returns>
        System.Threading.Tasks.Task<ResourceListOfScheduleDefinition> ListSchedulesAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] ListSchedules: List the available Schedules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfScheduleDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResourceListOfScheduleDefinition>> ListSchedulesWithHttpInfoAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] RunSchedule: Run a schedule immediately
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The schedule scope</param>
        /// <param name="code">The schedule cde</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartScheduleResponse</returns>
        System.Threading.Tasks.Task<StartScheduleResponse> RunScheduleAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] RunSchedule: Run a schedule immediately
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The schedule scope</param>
        /// <param name="code">The schedule cde</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StartScheduleResponse>> RunScheduleWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// [EXPERIMENTAL] UpdateSchedule: Update a schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be updated</param>
        /// <param name="code">Code of the schedule to be updated</param>
        /// <param name="updateScheduleRequest">The updated schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleDefinition</returns>
        System.Threading.Tasks.Task<ScheduleDefinition> UpdateScheduleAsync(string scope, string code, UpdateScheduleRequest updateScheduleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// [EXPERIMENTAL] UpdateSchedule: Update a schedule.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be updated</param>
        /// <param name="code">Code of the schedule to be updated</param>
        /// <param name="updateScheduleRequest">The updated schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleDefinition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScheduleDefinition>> UpdateScheduleWithHttpInfoAsync(string scope, string code, UpdateScheduleRequest updateScheduleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchedulesApi : ISchedulesApiSync, ISchedulesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchedulesApi : ISchedulesApi
    {
        private Finbourne.Scheduler.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchedulesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchedulesApi(String basePath)
        {
            this.Configuration = Finbourne.Scheduler.Sdk.Client.Configuration.MergeConfigurations(
                Finbourne.Scheduler.Sdk.Client.GlobalConfiguration.Instance,
                new Finbourne.Scheduler.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Finbourne.Scheduler.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Scheduler.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Finbourne.Scheduler.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchedulesApi(Finbourne.Scheduler.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = configuration;
            this.Client = new Finbourne.Scheduler.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Finbourne.Scheduler.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Finbourne.Scheduler.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SchedulesApi(Finbourne.Scheduler.Sdk.Client.ISynchronousClient client, Finbourne.Scheduler.Sdk.Client.IAsynchronousClient asyncClient, Finbourne.Scheduler.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Finbourne.Scheduler.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Finbourne.Scheduler.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Finbourne.Scheduler.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Finbourne.Scheduler.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Finbourne.Scheduler.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateSchedule: Create a Schedule for a job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScheduleRequest"></param>
        /// <returns>ScheduleDefinition</returns>
        public ScheduleDefinition CreateSchedule(CreateScheduleRequest createScheduleRequest)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> localVarResponse = CreateScheduleWithHttpInfo(createScheduleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateSchedule: Create a Schedule for a job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScheduleRequest"></param>
        /// <returns>ApiResponse of ScheduleDefinition</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> CreateScheduleWithHttpInfo(CreateScheduleRequest createScheduleRequest)
        {
            // verify the required parameter 'createScheduleRequest' is set
            if (createScheduleRequest == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'createScheduleRequest' when calling SchedulesApi->CreateSchedule");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createScheduleRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScheduleDefinition>("/api/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateSchedule: Create a Schedule for a job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleDefinition</returns>
        public async System.Threading.Tasks.Task<ScheduleDefinition> CreateScheduleAsync(CreateScheduleRequest createScheduleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> localVarResponse = await CreateScheduleWithHttpInfoAsync(createScheduleRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] CreateSchedule: Create a Schedule for a job 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createScheduleRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition>> CreateScheduleWithHttpInfoAsync(CreateScheduleRequest createScheduleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createScheduleRequest' is set
            if (createScheduleRequest == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'createScheduleRequest' when calling SchedulesApi->CreateSchedule");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createScheduleRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ScheduleDefinition>("/api/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteSchedule: Delete a schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be deleted</param>
        /// <param name="code">Code of the schedule to be deleted</param>
        /// <returns></returns>
        public void DeleteSchedule(string scope, string code)
        {
            DeleteScheduleWithHttpInfo(scope, code);
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteSchedule: Delete a schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be deleted</param>
        /// <param name="code">Code of the schedule to be deleted</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<Object> DeleteScheduleWithHttpInfo(string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling SchedulesApi->DeleteSchedule");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling SchedulesApi->DeleteSchedule");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/api/schedules/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteSchedule: Delete a schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be deleted</param>
        /// <param name="code">Code of the schedule to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteScheduleAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteScheduleWithHttpInfoAsync(scope, code, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// [EXPERIMENTAL] DeleteSchedule: Delete a schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be deleted</param>
        /// <param name="code">Code of the schedule to be deleted</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<Object>> DeleteScheduleWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling SchedulesApi->DeleteSchedule");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling SchedulesApi->DeleteSchedule");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/api/schedules/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] EnabledSchedule: Enable/disable a schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be enabled/disabled</param>
        /// <param name="code">Code of the schedule to be enabled/disabled</param>
        /// <param name="enable">Specify whether to enable or disable the schedule</param>
        /// <returns>ScheduleDefinition</returns>
        public ScheduleDefinition EnabledSchedule(string scope, string code, bool enable)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> localVarResponse = EnabledScheduleWithHttpInfo(scope, code, enable);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] EnabledSchedule: Enable/disable a schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be enabled/disabled</param>
        /// <param name="code">Code of the schedule to be enabled/disabled</param>
        /// <param name="enable">Specify whether to enable or disable the schedule</param>
        /// <returns>ApiResponse of ScheduleDefinition</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> EnabledScheduleWithHttpInfo(string scope, string code, bool enable)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling SchedulesApi->EnabledSchedule");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling SchedulesApi->EnabledSchedule");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "enable", enable));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request
            var localVarResponse = this.Client.Put<ScheduleDefinition>("/api/schedules/{scope}/{code}/enabled", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnabledSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] EnabledSchedule: Enable/disable a schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be enabled/disabled</param>
        /// <param name="code">Code of the schedule to be enabled/disabled</param>
        /// <param name="enable">Specify whether to enable or disable the schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleDefinition</returns>
        public async System.Threading.Tasks.Task<ScheduleDefinition> EnabledScheduleAsync(string scope, string code, bool enable, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> localVarResponse = await EnabledScheduleWithHttpInfoAsync(scope, code, enable, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] EnabledSchedule: Enable/disable a schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be enabled/disabled</param>
        /// <param name="code">Code of the schedule to be enabled/disabled</param>
        /// <param name="enable">Specify whether to enable or disable the schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition>> EnabledScheduleWithHttpInfoAsync(string scope, string code, bool enable, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling SchedulesApi->EnabledSchedule");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling SchedulesApi->EnabledSchedule");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "enable", enable));

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ScheduleDefinition>("/api/schedules/{scope}/{code}/enabled", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EnabledSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetSchedule: Get a single Schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of Schedule</param>
        /// <param name="code">The code of the Schedule</param>
        /// <returns>ScheduleDefinition</returns>
        public ScheduleDefinition GetSchedule(string scope, string code)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> localVarResponse = GetScheduleWithHttpInfo(scope, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetSchedule: Get a single Schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of Schedule</param>
        /// <param name="code">The code of the Schedule</param>
        /// <returns>ApiResponse of ScheduleDefinition</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> GetScheduleWithHttpInfo(string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling SchedulesApi->GetSchedule");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling SchedulesApi->GetSchedule");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScheduleDefinition>("/api/schedules/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetSchedule: Get a single Schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of Schedule</param>
        /// <param name="code">The code of the Schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleDefinition</returns>
        public async System.Threading.Tasks.Task<ScheduleDefinition> GetScheduleAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> localVarResponse = await GetScheduleWithHttpInfoAsync(scope, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] GetSchedule: Get a single Schedule 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The scope of Schedule</param>
        /// <param name="code">The code of the Schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition>> GetScheduleWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling SchedulesApi->GetSchedule");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling SchedulesApi->GetSchedule");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ScheduleDefinition>("/api/schedules/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListSchedules: List the available Schedules 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ResourceListOfScheduleDefinition</returns>
        public ResourceListOfScheduleDefinition ListSchedules(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition> localVarResponse = ListSchedulesWithHttpInfo(page, sortBy, start, limit, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListSchedules: List the available Schedules 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <returns>ApiResponse of ResourceListOfScheduleDefinition</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition> ListSchedulesWithHttpInfo(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string))
        {
            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "sortBy", sortBy));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request
            var localVarResponse = this.Client.Get<ResourceListOfScheduleDefinition>("/api/schedules", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSchedules", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListSchedules: List the available Schedules 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResourceListOfScheduleDefinition</returns>
        public async System.Threading.Tasks.Task<ResourceListOfScheduleDefinition> ListSchedulesAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition> localVarResponse = await ListSchedulesWithHttpInfoAsync(page, sortBy, start, limit, filter, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] ListSchedules: List the available Schedules 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The pagination token to use to continue listing instruments from a previous call to list instruments.              This value is returned from the previous call. If a pagination token is provided the sortBy and filter fields              must not have changed since the original request. Also, if set, a start value cannot be provided. (optional)</param>
        /// <param name="sortBy">Order the results by these fields. Use use the &#39;-&#39; sign to denote descending order e.g. -MyFieldName. (optional)</param>
        /// <param name="start">When paginating, skip this number of results. (optional)</param>
        /// <param name="limit">When paginating, limit the number of returned results to this many. Defaults to 2000 if not specified. Maximum is 5000. (optional, default to 2000)</param>
        /// <param name="filter">Expression to filter the result set. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResourceListOfScheduleDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<ResourceListOfScheduleDefinition>> ListSchedulesWithHttpInfoAsync(string page = default(string), List<string> sortBy = default(List<string>), int? start = default(int?), int? limit = default(int?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("multi", "sortBy", sortBy));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ResourceListOfScheduleDefinition>("/api/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSchedules", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] RunSchedule: Run a schedule immediately 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The schedule scope</param>
        /// <param name="code">The schedule cde</param>
        /// <returns>StartScheduleResponse</returns>
        public StartScheduleResponse RunSchedule(string scope, string code)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<StartScheduleResponse> localVarResponse = RunScheduleWithHttpInfo(scope, code);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] RunSchedule: Run a schedule immediately 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The schedule scope</param>
        /// <param name="code">The schedule cde</param>
        /// <returns>ApiResponse of StartScheduleResponse</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<StartScheduleResponse> RunScheduleWithHttpInfo(string scope, string code)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling SchedulesApi->RunSchedule");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling SchedulesApi->RunSchedule");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request
            var localVarResponse = this.Client.Post<StartScheduleResponse>("/api/schedules/{scope}/{code}/$run", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] RunSchedule: Run a schedule immediately 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The schedule scope</param>
        /// <param name="code">The schedule cde</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StartScheduleResponse</returns>
        public async System.Threading.Tasks.Task<StartScheduleResponse> RunScheduleAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<StartScheduleResponse> localVarResponse = await RunScheduleWithHttpInfoAsync(scope, code, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] RunSchedule: Run a schedule immediately 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">The schedule scope</param>
        /// <param name="code">The schedule cde</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StartScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<StartScheduleResponse>> RunScheduleWithHttpInfoAsync(string scope, string code, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling SchedulesApi->RunSchedule");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling SchedulesApi->RunSchedule");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StartScheduleResponse>("/api/schedules/{scope}/{code}/$run", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RunSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateSchedule: Update a schedule. 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be updated</param>
        /// <param name="code">Code of the schedule to be updated</param>
        /// <param name="updateScheduleRequest">The updated schedule</param>
        /// <returns>ScheduleDefinition</returns>
        public ScheduleDefinition UpdateSchedule(string scope, string code, UpdateScheduleRequest updateScheduleRequest)
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> localVarResponse = UpdateScheduleWithHttpInfo(scope, code, updateScheduleRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateSchedule: Update a schedule. 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be updated</param>
        /// <param name="code">Code of the schedule to be updated</param>
        /// <param name="updateScheduleRequest">The updated schedule</param>
        /// <returns>ApiResponse of ScheduleDefinition</returns>
        public Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> UpdateScheduleWithHttpInfo(string scope, string code, UpdateScheduleRequest updateScheduleRequest)
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling SchedulesApi->UpdateSchedule");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling SchedulesApi->UpdateSchedule");

            // verify the required parameter 'updateScheduleRequest' is set
            if (updateScheduleRequest == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'updateScheduleRequest' when calling SchedulesApi->UpdateSchedule");

            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json",
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = updateScheduleRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request
            var localVarResponse = this.Client.Put<ScheduleDefinition>("/api/schedules/{scope}/{code}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateSchedule: Update a schedule. 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be updated</param>
        /// <param name="code">Code of the schedule to be updated</param>
        /// <param name="updateScheduleRequest">The updated schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScheduleDefinition</returns>
        public async System.Threading.Tasks.Task<ScheduleDefinition> UpdateScheduleAsync(string scope, string code, UpdateScheduleRequest updateScheduleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition> localVarResponse = await UpdateScheduleWithHttpInfoAsync(scope, code, updateScheduleRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// [EXPERIMENTAL] UpdateSchedule: Update a schedule. 
        /// </summary>
        /// <exception cref="Finbourne.Scheduler.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Scope of the schedule to be updated</param>
        /// <param name="code">Code of the schedule to be updated</param>
        /// <param name="updateScheduleRequest">The updated schedule</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScheduleDefinition)</returns>
        public async System.Threading.Tasks.Task<Finbourne.Scheduler.Sdk.Client.ApiResponse<ScheduleDefinition>> UpdateScheduleWithHttpInfoAsync(string scope, string code, UpdateScheduleRequest updateScheduleRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scope' is set
            if (scope == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'scope' when calling SchedulesApi->UpdateSchedule");

            // verify the required parameter 'code' is set
            if (code == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'code' when calling SchedulesApi->UpdateSchedule");

            // verify the required parameter 'updateScheduleRequest' is set
            if (updateScheduleRequest == null)
                throw new Finbourne.Scheduler.Sdk.Client.ApiException(400, "Missing required parameter 'updateScheduleRequest' when calling SchedulesApi->UpdateSchedule");


            Finbourne.Scheduler.Sdk.Client.RequestOptions localVarRequestOptions = new Finbourne.Scheduler.Sdk.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Finbourne.Scheduler.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("scope", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(scope)); // path parameter
            localVarRequestOptions.PathParameters.Add("code", Finbourne.Scheduler.Sdk.Client.ClientUtils.ParameterToString(code)); // path parameter
            localVarRequestOptions.Data = updateScheduleRequest;

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            //  set the LUSID header
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Language", "C#");
            localVarRequestOptions.HeaderParameters.Add("X-LUSID-Sdk-Version", "0.0.830");

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<ScheduleDefinition>("/api/schedules/{scope}/{code}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSchedule", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}